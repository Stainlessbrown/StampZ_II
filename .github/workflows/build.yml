name: Build StampZ_II Cross-Platform

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows-x64
            ext: .exe
          - os: macos-13
            name: mac-intel
            ext: ""
          - os: macos-latest
            name: mac-arm
            ext: ""
          - os: ubuntu-22.04  # Modern Linux build for Ubuntu 22.04+ and Mint 22
            name: linux-x64
            ext: ""
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # Install optional tifffile for 16-bit TIFF support
        pip install tifffile
        
    - name: Create macOS icon (icns)
      if: startsWith(matrix.os, 'macos')
      run: |
        # Create icns file from original StampZ PNG for macOS
        mkdir -p StampZ.iconset
        # Use sips (built into macOS) to create different sizes from original StampZ_256 icon
        sips -z 16 16 "resources/StampZ_256.png" --out "StampZ.iconset/icon_16x16.png"
        sips -z 32 32 "resources/StampZ_256.png" --out "StampZ.iconset/icon_16x16@2x.png"
        sips -z 32 32 "resources/StampZ_256.png" --out "StampZ.iconset/icon_32x32.png"
        sips -z 64 64 "resources/StampZ_256.png" --out "StampZ.iconset/icon_32x32@2x.png"
        sips -z 128 128 "resources/StampZ_256.png" --out "StampZ.iconset/icon_128x128.png"
        sips -z 256 256 "resources/StampZ_256.png" --out "StampZ.iconset/icon_128x128@2x.png"
        sips -z 256 256 "resources/StampZ_256.png" --out "StampZ.iconset/icon_256x256.png"
        sips -z 512 512 "resources/StampZ_256.png" --out "StampZ.iconset/icon_256x256@2x.png"
        sips -z 512 512 "resources/StampZ_256.png" --out "StampZ.iconset/icon_512x512.png"
        sips -z 1024 1024 "resources/StampZ_256.png" --out "StampZ.iconset/icon_512x512@2x.png" 2>/dev/null || sips -z 512 512 "resources/StampZ_256.png" --out "StampZ.iconset/icon_512x512@2x.png"
        # Create the icns file
        iconutil -c icns StampZ.iconset
        ls -la StampZ.icns
    
    - name: Verify environment (Unix)
      if: runner.os != 'Windows'
      run: |
        echo "Current directory contents:"
        ls -la
        echo "Python version:"
        python --version
        echo "PyInstaller version:"
        python -m PyInstaller --version
        echo "Required files check:"
        ls -la main.py requirements.txt runtime_hook.py resources/
        
    - name: Verify environment (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Write-Host "Current directory contents:"
        Get-ChildItem
        Write-Host "Python version:"
        python --version
        Write-Host "PyInstaller version:"
        python -m PyInstaller --version
        Write-Host "Required files check:"
        Write-Host "main.py exists: $(Test-Path main.py)"
        Write-Host "requirements.txt exists: $(Test-Path requirements.txt)"
        Write-Host "runtime_hook.py exists: $(Test-Path runtime_hook.py)"
        Get-ChildItem resources
    - name: Build macOS executable
      if: startsWith(matrix.os, 'macos')
      run: |
        # macOS: Use stampz.spec for consistent builds with template files included
        python -m PyInstaller stampz.spec
        # Rename the output to match expected name
        mv dist/StampZ_II.app dist/StampZ_II_${{ matrix.name }}.app
        echo "macOS build completed. Checking dist directory:"
        ls -la dist/
        
    - name: Build Windows executable
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        # Windows: Use stampz.spec for consistent builds with template files included
        # Note: spec file will create onefile build on Windows platform
        python -m PyInstaller stampz.spec
        # Rename the output to match expected name (Windows creates .exe automatically)
        if (Test-Path "dist/StampZ_II.exe") {
          Rename-Item "dist/StampZ_II.exe" "StampZ_II_${{ matrix.name }}.exe"
        } else {
          Write-Host "ERROR: StampZ_II.exe not found! Checking dist directory:"
          Get-ChildItem dist
          exit 1
        }
        Write-Host "Windows build completed. Checking dist directory:"
        Get-ChildItem dist
        
    - name: Build Linux executable
      if: matrix.os == 'ubuntu-22.04'
      run: |
        # Linux: Use PyInstaller spec file for comprehensive PIL/tkinter support
        python -m PyInstaller stampz.spec
        # Rename the output to match expected name
        mv dist/StampZ_II dist/StampZ_II_${{ matrix.name }}
        echo "Linux build completed. Checking dist directory:"
        ls -la dist/
        
    - name: Package macOS output
      if: startsWith(matrix.os, 'macos')
      run: |
        cd dist
        echo "Current dist contents:"
        ls -la
        # macOS: Create zip of the .app bundle (already named correctly)
        if [ -d "StampZ_II_${{ matrix.name }}.app" ]; then
          zip -r StampZ_II_${{ matrix.name }}.zip StampZ_II_${{ matrix.name }}.app
          echo "Created macOS app bundle: StampZ_II_${{ matrix.name }}.zip"
          ls -la StampZ_II_${{ matrix.name }}.zip
        else
          echo "ERROR: StampZ_II_${{ matrix.name }}.app not found!"
          ls -la
          exit 1
        fi
        
    - name: Package Windows output
      if: matrix.os == 'windows-latest'
      run: |
        cd dist
        echo "Current dist contents:"
        dir
        echo "Files already correctly named:"
        dir StampZ_II_${{ matrix.name }}.exe
        
    - name: Package Linux output
      if: matrix.os == 'ubuntu-22.04'
      run: |
        cd dist
        echo "Current dist contents:"
        ls -la
        echo "Files already correctly named:"
        ls -la StampZ_II_${{ matrix.name }}
    
    - name: Upload macOS app bundle
      if: startsWith(matrix.os, 'macos')
      uses: actions/upload-artifact@v4
      with:
        name: StampZ_II_${{ matrix.name }}
        path: dist/StampZ_II_${{ matrix.name }}.zip
        
    - name: Upload Windows/Linux executable
      if: "!startsWith(matrix.os, 'macos')"
      uses: actions/upload-artifact@v4
      with:
        name: StampZ_II_${{ matrix.name }}
        path: dist/StampZ_II_${{ matrix.name }}${{ matrix.ext }}

  cleanup:
    needs: build
    runs-on: ubuntu-latest
    if: always()
    permissions:
      actions: write
    steps:
    - name: Delete old artifacts (keep current + previous builds)
      uses: actions/github-script@v7
      with:
        script: |
          const artifacts = await github.rest.actions.listArtifactsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
          });
          
          // Sort artifacts by creation time (newest first)
          const sortedArtifacts = artifacts.data.artifacts.sort((a, b) => 
            new Date(b.created_at).getTime() - new Date(a.created_at).getTime()
          );
          
          // Group artifacts by workflow run (each build creates 4 artifacts: mac-intel, mac-arm, windows-x64, linux-x64)
          const artifactsByWorkflowRun = {};
          for (const artifact of sortedArtifacts) {
            const runId = artifact.workflow_run.id;
            if (!artifactsByWorkflowRun[runId]) {
              artifactsByWorkflowRun[runId] = [];
            }
            artifactsByWorkflowRun[runId].push(artifact);
          }
          
          // Get sorted workflow run IDs (newest first)
          const workflowRunIds = Object.keys(artifactsByWorkflowRun).sort((a, b) => {
            const aTime = Math.max(...artifactsByWorkflowRun[a].map(art => new Date(art.created_at).getTime()));
            const bTime = Math.max(...artifactsByWorkflowRun[b].map(art => new Date(art.created_at).getTime()));
            return bTime - aTime;
          });
          
          console.log(`Found ${workflowRunIds.length} workflow runs with artifacts`);
          
          // Keep current build (index 0) and previous build (index 1), delete the rest
          const runsToKeep = 2;
          const runsToDelete = workflowRunIds.slice(runsToKeep);
          
          console.log(`Keeping artifacts from ${Math.min(runsToKeep, workflowRunIds.length)} most recent builds`);
          console.log(`Deleting artifacts from ${runsToDelete.length} older builds`);
          
          let deletedCount = 0;
          for (const runId of runsToDelete) {
            const runArtifacts = artifactsByWorkflowRun[runId];
            console.log(`Deleting ${runArtifacts.length} artifacts from workflow run ${runId}`);
            
            for (const artifact of runArtifacts) {
              try {
                console.log(`  - Deleting: ${artifact.name} (ID: ${artifact.id})`);
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                });
                deletedCount++;
              } catch (error) {
                console.log(`  - Failed to delete ${artifact.name}: ${error.message}`);
              }
            }
          }
          
          console.log(`Successfully deleted ${deletedCount} artifacts`);
          
          // Log what we're keeping
          const keptRuns = workflowRunIds.slice(0, runsToKeep);
          for (let i = 0; i < keptRuns.length; i++) {
            const runId = keptRuns[i];
            const runArtifacts = artifactsByWorkflowRun[runId];
            const buildType = i === 0 ? 'CURRENT' : 'PREVIOUS';
            console.log(`${buildType} BUILD (Run ${runId}): keeping ${runArtifacts.length} artifacts`);
            runArtifacts.forEach(art => console.log(`  - ${art.name}`));
          }
