name: Build StampZ Cross-Platform

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            name: windows-x64
            ext: .exe
          - os: macos-13
            name: mac-intel
            ext: ""
          - os: macos-latest
            name: mac-arm
            ext: ""
          - os: ubuntu-22.04  # Modern Linux build for Ubuntu 22.04+ and Mint 22
            name: linux-x64
            ext: ""
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Create macOS icon (icns)
      if: startsWith(matrix.os, 'macos')
      run: |
        # Create icns file from PNG for macOS
        mkdir -p StampZ.iconset
        # Use sips (built into macOS) to create different sizes
        sips -z 16 16 "resources/StampZ_256.png" --out "StampZ.iconset/icon_16x16.png"
        sips -z 32 32 "resources/StampZ_256.png" --out "StampZ.iconset/icon_16x16@2x.png"
        sips -z 32 32 "resources/StampZ_256.png" --out "StampZ.iconset/icon_32x32.png"
        sips -z 64 64 "resources/StampZ_256.png" --out "StampZ.iconset/icon_32x32@2x.png"
        sips -z 128 128 "resources/StampZ_256.png" --out "StampZ.iconset/icon_128x128.png"
        sips -z 256 256 "resources/StampZ_256.png" --out "StampZ.iconset/icon_128x128@2x.png"
        sips -z 256 256 "resources/StampZ_256.png" --out "StampZ.iconset/icon_256x256.png"
        sips -z 512 512 "resources/StampZ_256.png" --out "StampZ.iconset/icon_256x256@2x.png"
        sips -z 512 512 "resources/StampZ_256.png" --out "StampZ.iconset/icon_512x512.png"
        sips -z 1024 1024 "resources/StampZ_256.png" --out "StampZ.iconset/icon_512x512@2x.png" 2>/dev/null || sips -z 512 512 "resources/StampZ_256.png" --out "StampZ.iconset/icon_512x512@2x.png"
        # Create the icns file
        iconutil -c icns StampZ.iconset
        ls -la StampZ.icns
    
    - name: Verify environment (Unix)
      if: runner.os != 'Windows'
      run: |
        echo "Current directory contents:"
        ls -la
        echo "Python version:"
        python --version
        echo "PyInstaller version:"
        python -m PyInstaller --version
        echo "Required files check:"
        ls -la main.py requirements.txt runtime_hook.py resources/
        
    - name: Verify environment (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        Write-Host "Current directory contents:"
        Get-ChildItem
        Write-Host "Python version:"
        python --version
        Write-Host "PyInstaller version:"
        python -m PyInstaller --version
        Write-Host "Required files check:"
        Write-Host "main.py exists: $(Test-Path main.py)"
        Write-Host "requirements.txt exists: $(Test-Path requirements.txt)"
        Write-Host "runtime_hook.py exists: $(Test-Path runtime_hook.py)"
        Get-ChildItem resources
    - name: Build macOS executable
      if: startsWith(matrix.os, 'macos')
      run: |
        # macOS: Create .app bundle with icon
        python -m PyInstaller --onedir --windowed --name StampZ_${{ matrix.name }} \
          --icon=StampZ.icns \
          --hidden-import=odf.opendocument --hidden-import=odf.table --hidden-import=odf.text \
          --hidden-import=odf.style --hidden-import=odf.number --hidden-import=colorspacious \
          --hidden-import=matplotlib --hidden-import=matplotlib.pyplot --hidden-import=pandas \
          --hidden-import=matplotlib.backends.backend_tkagg --hidden-import=openpyxl \
          --collect-all odfpy --collect-all matplotlib --collect-all openpyxl --add-data "resources:resources" --add-data "data:data" \
          --runtime-hook runtime_hook.py main.py
        echo "macOS build completed. Checking dist directory:"
        ls -la dist/
        
    - name: Build Windows executable
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        # Windows: Create full-featured single executable with all components
        python -m PyInstaller --onefile --windowed --name "StampZ_${{ matrix.name }}" `
          --hidden-import=odf.opendocument --hidden-import=odf.table --hidden-import=odf.text `
          --hidden-import=odf.style --hidden-import=odf.number --hidden-import=colorspacious `
          --hidden-import=matplotlib --hidden-import=matplotlib.pyplot --hidden-import=pandas `
          --hidden-import=matplotlib.backends.backend_tkagg --hidden-import=openpyxl `
          --collect-all odfpy --collect-all matplotlib --collect-all openpyxl --add-data "resources;resources" --add-data "data;data" `
          --runtime-hook runtime_hook.py main.py
        Write-Host "Windows build completed. Checking dist directory:"
        Get-ChildItem dist
        
    - name: Build Linux executable
      if: matrix.os == 'ubuntu-22.04'
      run: |
        # Linux: Use PyInstaller spec file for comprehensive PIL/tkinter support
        python -m PyInstaller stampz.spec
        # Rename the output to match expected name
        mv dist/StampZ dist/StampZ_${{ matrix.name }}
        echo "Linux build completed. Checking dist directory:"
        ls -la dist/
        
    - name: Package macOS output
      if: startsWith(matrix.os, 'macos')
      run: |
        cd dist
        echo "Current dist contents:"
        ls -la
        # macOS: Create zip of the .app bundle (already named correctly)
        if [ -d "StampZ_${{ matrix.name }}.app" ]; then
          zip -r StampZ_${{ matrix.name }}.zip StampZ_${{ matrix.name }}.app
          echo "Created macOS app bundle: StampZ_${{ matrix.name }}.zip"
          ls -la StampZ_${{ matrix.name }}.zip
        else
          echo "ERROR: StampZ_${{ matrix.name }}.app not found!"
          ls -la
          exit 1
        fi
        
    - name: Package Windows output
      if: matrix.os == 'windows-latest'
      run: |
        cd dist
        echo "Current dist contents:"
        dir
        echo "Files already correctly named:"
        dir StampZ_${{ matrix.name }}.exe
        
    - name: Package Linux output
      if: matrix.os == 'ubuntu-22.04'
      run: |
        cd dist
        echo "Current dist contents:"
        ls -la
        echo "Files already correctly named:"
        ls -la StampZ_${{ matrix.name }}
    
    - name: Upload macOS app bundle
      if: startsWith(matrix.os, 'macos')
      uses: actions/upload-artifact@v4
      with:
        name: StampZ_${{ matrix.name }}
        path: dist/StampZ_${{ matrix.name }}.zip
        
    - name: Upload Windows/Linux executable
      if: "!startsWith(matrix.os, 'macos')"
      uses: actions/upload-artifact@v4
      with:
        name: StampZ_${{ matrix.name }}
        path: dist/StampZ_${{ matrix.name }}${{ matrix.ext }}
